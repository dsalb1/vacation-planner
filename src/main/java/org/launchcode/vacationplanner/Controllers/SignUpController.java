package org.launchcode.vacationplanner.Controllers;

import org.launchcode.vacationplanner.Models.Data.TripDao;
import org.launchcode.vacationplanner.Models.Data.UserDao;
import org.launchcode.vacationplanner.Models.Helpers.CookieHelper;
import org.launchcode.vacationplanner.Models.Helpers.LogInHelper;
import org.launchcode.vacationplanner.Models.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

/**
 * Created by Dan on 7/5/2017.
 */

@Controller
@RequestMapping(value="vacation/user")
public class SignUpController {

    @Autowired
    private UserDao userDao;

    @Autowired
    private TripDao tripDao;

    @RequestMapping(value="signup", method= RequestMethod.GET)
    public String userSignUp(Model model) {
        model.addAttribute("title", "User Sign Up");
        model.addAttribute("user", new User());

        return "user/signup";
    }

    @RequestMapping(value="signup", method = RequestMethod.POST)
    public String processUserSignup(Model model, String verify, @ModelAttribute @Valid User newUser, Errors errors, HttpServletRequest request, HttpServletResponse response) {


        if (errors.hasErrors()) {
            model.addAttribute("title", "User Sign Up");
            model.addAttribute("user", newUser);

            return "user/signup";
        }
        //user signup is successful
        else if (newUser.getPassword().equals(verify)) {

            String hex = LogInHelper.Hash(newUser.getPassword());
            newUser.setPassword(hex);
            userDao.save(newUser);
            //get id as string after its generated by User entity
            String id = Integer.toString(newUser.getId());

            CookieHelper.addCookie(response, "id", id, (60*60*24*14));
            CookieHelper.addCookie(response,"hex", newUser.getPassword(), (60*60*24*14));

            return "redirect:/vacation/";
        } else {

            model.addAttribute("verify", "The passwords do not match.");
            newUser.setPassword("");
            model.addAttribute("user", newUser);

            return "user/signup";
        }
    }

    @RequestMapping(value="login", method=RequestMethod.GET)
    public String userLogIn(Model model) {
        model.addAttribute("title", "Log In");

        return "user/login";
    }

    @RequestMapping(value="login", method=RequestMethod.POST)
    public String processUserLogIn(HttpServletResponse response, Model model, String username, String password) {
        User theUser = LogInHelper.findUser(userDao, username, password);
        if(theUser != null) {
            /*
            todo provide an all-in-one cookie setter for user sessions
             */
            String id = Integer.toString(theUser.getId());
            CookieHelper.addCookie(response, "id", id, (60*60*24*14));
            CookieHelper.addCookie(response, "hex", theUser.getPassword(), (60*60*24*14));
            return "redirect:/vacation/";
        }

        model.addAttribute("username", "Username and password do not match");
        return "user/login";
    }

    @RequestMapping(value="logout")
    public String userLogOut(HttpServletResponse response, Model model) {
        CookieHelper.removeCookie(response, "id");
        CookieHelper.removeCookie(response, "hex");
        model.addAttribute("title", "Recently Added Trips");
        model.addAttribute("trips", tripDao.findAll());
        return "user/logout";
    }

}
